/**
 * ordersApiSlice:
 * This slice extends the base `apiSlice` from Redux Toolkit Query (RTK Query) to manage API interactions
 * related to orders. It defines endpoints for handling order-related API requests.
 *
 * Key Features:
 * - Utilizes RTK Query's `injectEndpoints` method to define API endpoints.
 * - Provides a mutation for creating new orders by sending a POST request to the API.
 * - Exports a custom hook (`useCreateOrderMutation`) for convenient use of the `createOrder` mutation in components.
 *
 * Implementation Details:
 * - `apiSlice.injectEndpoints`: Extends the base API slice with additional endpoints.
 * - `builder.mutation`: Defines a mutation endpoint to send data to the server.
 * - `ORDERS_URL`: A constant representing the base URL for order-related API routes.
 * 
 * Exports:
 * - `useCreateOrderMutation`: A hook generated by RTK Query to invoke the `createOrder` mutation in React components.
 *
 * Usage Example:
 * const [createOrder, { isLoading, isSuccess, isError }] = useCreateOrderMutation();
 * 
 * const handleCreateOrder = async (orderData) => {
 *   try {
 *     const response = await createOrder(orderData).unwrap();
 *     console.log('Order created successfully:', response);
 *   } catch (error) {
 *     console.error('Error creating order:', error);
 *   }
 * };
 */

import { apiSlice } from './apiSlice'; // Import the base API slice
import { ORDERS_URL, PAYPAL_URL } from '../constants'; // Import the API URL for orders and PayPal client ID URL from constants file 


// Extend the base apiSlice with new endpoints specific to orders
export const ordersApiSlice = apiSlice.injectEndpoints({
  endpoints: (builder) => ({
    // Define a mutation endpoint for creating a new order
    createOrder: builder.mutation({
      query: (order) => ({
        url: ORDERS_URL, // The API URL for creating orders
        method: 'POST', // HTTP method to create the order
        body: { ...order }, // Pass the order data as the request body
      }),
    }),
    // Define a query endpoint for fetching order details by ID
    getOrderDetails: builder.query({
      query: (id) => ({
        url: `${ORDERS_URL}/${id}`, // The API URL for fetching order details by ID 
      }),
      keepUnusedDataFor: 5, // Cache the data for 5 seconds
    }),
    // Define a mutation endpoint for paying an order by ID with payment details 
    payOrder: builder.mutation({
      query: ({ orderId, details }) => ({
        url: `${ORDERS_URL}/${orderId}/pay`, // The API URL for paying an order by ID 
        method: 'PUT', // HTTP method to update the order payment status 
        body: { ...details }, // Pass the payment details as the request body 
      }),
    }),
    // Define a query endpoint for fetching the PayPal client ID 
    getPaypalClientId: builder.query({
      query: () => ({
        url: PAYPAL_URL, // The API URL for fetching the PayPal client ID 
      }),
      keepUnusedDataFor: 5, // Cache the data for 5 seconds 
    }),
    // Define a query endpoint for fetching the current user's orders 
    getMyOrders: builder.query({
      query: () => ({
        url: `${ORDERS_URL}/mine`, // The API URL for fetching the current user's orders 
      }),
      keepUnusedDataFor: 5, // Cache the data for 5 seconds
    }),
  }),
});

// Export the hook to use the createOrder mutation in React components
export const { useCreateOrderMutation, useGetOrderDetailsQuery, usePayOrderMutation, useGetPaypalClientIdQuery, useGetMyOrdersQuery } = ordersApiSlice;
